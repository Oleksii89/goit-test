{"version":3,"file":"static/js/748.fd7ec1b7.chunk.js","mappings":"iOAoDA,UA7CoB,WAClB,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACRE,GAAwCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7CI,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GACpCI,GAA0BL,EAAAA,EAAAA,UAAS,MAAKM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAjCE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GACtBG,GAAkCT,EAAAA,EAAAA,WAAS,GAAMU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAqB9B,OAnBAG,EAAAA,EAAAA,YAAU,WACR,GAAKhB,EAAL,CAEA,IAAMiB,EAAiB,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEH,OAFGF,EAAAC,KAAA,EAEtBX,GAAa,GAAMU,EAAAE,KAAA,GAEMC,EAAAA,EAAAA,IAAe5B,GAAS,KAAD,EAA1CuB,EAAUE,EAAAI,KAEhBtB,EAAgBgB,GAAYE,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAK,GAAAL,EAAA,SAE5Bd,EAASc,EAAAK,GAAMC,SAAS,QAEJ,OAFIN,EAAAC,KAAA,GAExBX,GAAa,GAAOU,EAAAO,OAAA,6BAAAP,EAAAQ,OAAA,GAAAX,EAAA,wBAEvB,kBAZsB,OAAAJ,EAAAgB,MAAA,KAAAC,UAAA,KAavBlB,GAfoB,CAgBtB,GAAG,CAACjB,KAGFoC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CACGvB,IAAawB,EAAAA,EAAAA,KAACC,EAAAA,EAAM,IACpB7B,IAAS4B,EAAAA,EAAAA,KAAA,KAAAD,SAAG,kBACY,IAAxB/B,EAAakC,QACZF,EAAAA,EAAAA,KAAA,KAAAD,SAAG,+CAEHC,EAAAA,EAAAA,KAAA,MAAAD,SACG/B,EAAamC,KAAI,SAAAC,GAAA,IAAGC,EAAED,EAAFC,GAAIC,EAAMF,EAANE,OAAQC,EAAOH,EAAPG,QAAO,OACtCT,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACED,EAAAA,EAAAA,MAAA,MAAAC,SAAA,CAAI,WAASO,MACbN,EAAAA,EAAAA,KAAA,KAAAD,SAAIQ,MAFGF,EAGJ,QAMjB,C","sources":["pages/ReviewsPage/ReviewsPage.jsx"],"sourcesContent":["import { Loader } from 'components/Loader/Loader';\nimport React from 'react';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getReviewMovie } from 'services/api';\n\nconst ReviewsPage = () => {\n  const { movieId } = useParams();\n  const [movieReviews, setMovieReviews] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (!movieId) return;\n\n    const fetchReviewsMovie = async () => {\n      try {\n        setIsLoading(true);\n\n        const reviewData = await getReviewMovie(movieId);\n\n        setMovieReviews(reviewData);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchReviewsMovie();\n  }, [movieId]);\n\n  return (\n    <div>\n      {isLoading && <Loader />}\n      {error && <p>error.message</p>}\n      {movieReviews.length === 0 ? (\n        <p>We don't have any reviews for this movie.</p>\n      ) : (\n        <ul>\n          {movieReviews.map(({ id, author, content }) => (\n            <li key={id}>\n              <h3>Author: {author}</h3>\n              <p>{content}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default ReviewsPage;\n"],"names":["movieId","useParams","_useState","useState","_useState2","_slicedToArray","movieReviews","setMovieReviews","_useState3","_useState4","error","setError","_useState5","_useState6","isLoading","setIsLoading","useEffect","fetchReviewsMovie","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","reviewData","wrap","_context","prev","next","getReviewMovie","sent","t0","message","finish","stop","apply","arguments","_jsxs","children","_jsx","Loader","length","map","_ref2","id","author","content"],"sourceRoot":""}